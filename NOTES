Known bugs (most important at top):

UI
 - queue messages sent while the peer is offline, and send them when the peer comes online
 - make sure contact deletion is at least a bit permanent (i.e. after you deleted someone, they can't just reconnect immediately, maybe a "blocked" list? maybe we just need to support contact requests? maybe we just permanently hide a contact after they've been deleted?)
 - should refactor ui.js to be a bit easier to use, and possibly split into several files
 - when you go to view a chat that has unread messages, it should draw a hr after the last-read message
 - input box should support multi-line
 - should have timestamps in the chat
 - pixel-perfect positioning might not work right in other browsers
 - make it work a bit nicer on mobile
 - we should put invisible ">" symbols in front of the other parties' messages so that copy and paste looks right
 - support the "contact request" workflow instead of just assuming all contacts are accepted
 - separate "offline" and "requests" contact lists
 - initial messages should be at the bottom of the window, not the top
 - optional chat log in localStorage?
 - make a more modern-looking ui, while still retaining the general feel of ricochet

Backend
 - config file to configure port number etc.
 - instructions for installation etc. like in ricochet-group readme
 - support the "message acknowledgement" feature, and expose it in the ui so that users know when their message has been delivered
 - can we abuse some part of the ricochet protocol to create a "ping" to check that the connection is still alive? e.g. try to open an invalid channel and wait for the rejection message?

Bouncer mode
 - ui should let users view&paste their private key
 - some way to store&retrieve keys with a password, coupled with multiple concurrent clients, gives us basically a ricochet bouncer: load up your ricochet-web instance from anywhere, type in your password, and connect to your 1 identity
 - contacts list should be synced to server-side; basically everything that goes to localStorage needs to go to the server.
 - if there's a chat log, should that be synced as well?

Maybe already fixed
 - work out why messages sent from the web interface sometimes don't get delivered to the other side
 - is there a race window between a client disconnecting and the tor process releasing its hidden service, in which
   a client could connect and cause the bot to crash?

Maybe a better way to implement this would be to have the websocket just expose access to Tor, and then all of the
Tor stuff is done in javascript, and only encrypted Tor packets aren't sent to the server. That would mean the server
doesn't have to be very trusted, but it would also mean we couldn't do the "bouncer" type stuff where you share an
identity between several devices.
